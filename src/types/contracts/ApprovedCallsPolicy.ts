/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ApprovedCallsPolicyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "POLICY_ADMIN_ROLE"
      | "SIGNER_ROLE"
      | "approveCalls"
      | "approveCallsViaSignature"
      | "approvedCalls"
      | "approvedCallsExpiration"
      | "approvedConsumer"
      | "authorizedExecutors"
      | "getEthSignedMessageHash"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "nonces"
      | "postExecution"
      | "preExecution"
      | "recoverSigner"
      | "renounceRole"
      | "revokeRole"
      | "setConsumersStatuses"
      | "setExecutorStatus"
      | "splitSignature"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "RoleAdminChanged" | "RoleGranted" | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POLICY_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIGNER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveCalls",
    values: [BytesLike[], BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveCallsViaSignature",
    values: [BytesLike[], BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedCalls",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedCallsExpiration",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedConsumer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedExecutors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthSignedMessageHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "postExecution",
    values: [AddressLike, AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "preExecution",
    values: [AddressLike, AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverSigner",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setConsumersStatuses",
    values: [AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutorStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "splitSignature",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POLICY_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIGNER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveCalls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveCallsViaSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedCalls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedCallsExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedExecutors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthSignedMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setConsumersStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutorStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ApprovedCallsPolicy extends BaseContract {
  connect(runner?: ContractRunner | null): ApprovedCallsPolicy;
  waitForDeployment(): Promise<this>;

  interface: ApprovedCallsPolicyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  POLICY_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  SIGNER_ROLE: TypedContractMethod<[], [string], "view">;

  approveCalls: TypedContractMethod<
    [_callHashes: BytesLike[], expiration: BigNumberish, txOrigin: AddressLike],
    [void],
    "nonpayable"
  >;

  approveCallsViaSignature: TypedContractMethod<
    [
      _callHashes: BytesLike[],
      expiration: BigNumberish,
      txOrigin: AddressLike,
      nonce: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  approvedCalls: TypedContractMethod<
    [txOrigin: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  approvedCallsExpiration: TypedContractMethod<
    [txOrigin: AddressLike],
    [bigint],
    "view"
  >;

  approvedConsumer: TypedContractMethod<
    [consumer: AddressLike],
    [boolean],
    "view"
  >;

  authorizedExecutors: TypedContractMethod<
    [executor: AddressLike],
    [boolean],
    "view"
  >;

  getEthSignedMessageHash: TypedContractMethod<
    [_messageHash: BytesLike],
    [string],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  nonces: TypedContractMethod<[txOrigin: AddressLike], [bigint], "view">;

  postExecution: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BytesLike, arg3: BigNumberish],
    [void],
    "nonpayable"
  >;

  preExecution: TypedContractMethod<
    [
      consumer: AddressLike,
      sender: AddressLike,
      data: BytesLike,
      value: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  recoverSigner: TypedContractMethod<
    [_ethSignedMessageHash: BytesLike, _signature: BytesLike],
    [string],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setConsumersStatuses: TypedContractMethod<
    [consumers: AddressLike[], statuses: boolean[]],
    [void],
    "nonpayable"
  >;

  setExecutorStatus: TypedContractMethod<
    [caller: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;

  splitSignature: TypedContractMethod<
    [sig: BytesLike],
    [[string, string, bigint] & { r: string; s: string; v: bigint }],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POLICY_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SIGNER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approveCalls"
  ): TypedContractMethod<
    [_callHashes: BytesLike[], expiration: BigNumberish, txOrigin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveCallsViaSignature"
  ): TypedContractMethod<
    [
      _callHashes: BytesLike[],
      expiration: BigNumberish,
      txOrigin: AddressLike,
      nonce: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approvedCalls"
  ): TypedContractMethod<
    [txOrigin: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "approvedCallsExpiration"
  ): TypedContractMethod<[txOrigin: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "approvedConsumer"
  ): TypedContractMethod<[consumer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedExecutors"
  ): TypedContractMethod<[executor: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getEthSignedMessageHash"
  ): TypedContractMethod<[_messageHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[txOrigin: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "postExecution"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BytesLike, arg3: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preExecution"
  ): TypedContractMethod<
    [
      consumer: AddressLike,
      sender: AddressLike,
      data: BytesLike,
      value: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recoverSigner"
  ): TypedContractMethod<
    [_ethSignedMessageHash: BytesLike, _signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setConsumersStatuses"
  ): TypedContractMethod<
    [consumers: AddressLike[], statuses: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExecutorStatus"
  ): TypedContractMethod<
    [caller: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "splitSignature"
  ): TypedContractMethod<
    [sig: BytesLike],
    [[string, string, bigint] & { r: string; s: string; v: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
