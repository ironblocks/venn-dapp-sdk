/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FirewallConsumerBaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptFirewallAdmin"
      | "firewallAdmin"
      | "safeFunctionCall"
      | "setApprovedTarget"
      | "setFirewall"
      | "setFirewallAdmin"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "FirewallAdminUpdated" | "FirewallUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptFirewallAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firewallAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeFunctionCall",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovedTarget",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFirewall",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFirewallAdmin",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptFirewallAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firewallAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeFunctionCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovedTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFirewall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFirewallAdmin",
    data: BytesLike
  ): Result;
}

export namespace FirewallAdminUpdatedEvent {
  export type InputTuple = [newAdmin: AddressLike];
  export type OutputTuple = [newAdmin: string];
  export interface OutputObject {
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FirewallUpdatedEvent {
  export type InputTuple = [newFirewall: AddressLike];
  export type OutputTuple = [newFirewall: string];
  export interface OutputObject {
    newFirewall: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FirewallConsumerBase extends BaseContract {
  connect(runner?: ContractRunner | null): FirewallConsumerBase;
  waitForDeployment(): Promise<this>;

  interface: FirewallConsumerBaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptFirewallAdmin: TypedContractMethod<[], [void], "nonpayable">;

  firewallAdmin: TypedContractMethod<[], [string], "view">;

  safeFunctionCall: TypedContractMethod<
    [target: AddressLike, targetPayload: BytesLike, data: BytesLike],
    [void],
    "payable"
  >;

  setApprovedTarget: TypedContractMethod<
    [target: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;

  setFirewall: TypedContractMethod<
    [_firewall: AddressLike],
    [void],
    "nonpayable"
  >;

  setFirewallAdmin: TypedContractMethod<
    [_firewallAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptFirewallAdmin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "firewallAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "safeFunctionCall"
  ): TypedContractMethod<
    [target: AddressLike, targetPayload: BytesLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setApprovedTarget"
  ): TypedContractMethod<
    [target: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFirewall"
  ): TypedContractMethod<[_firewall: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFirewallAdmin"
  ): TypedContractMethod<[_firewallAdmin: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "FirewallAdminUpdated"
  ): TypedContractEvent<
    FirewallAdminUpdatedEvent.InputTuple,
    FirewallAdminUpdatedEvent.OutputTuple,
    FirewallAdminUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FirewallUpdated"
  ): TypedContractEvent<
    FirewallUpdatedEvent.InputTuple,
    FirewallUpdatedEvent.OutputTuple,
    FirewallUpdatedEvent.OutputObject
  >;

  filters: {
    "FirewallAdminUpdated(address)": TypedContractEvent<
      FirewallAdminUpdatedEvent.InputTuple,
      FirewallAdminUpdatedEvent.OutputTuple,
      FirewallAdminUpdatedEvent.OutputObject
    >;
    FirewallAdminUpdated: TypedContractEvent<
      FirewallAdminUpdatedEvent.InputTuple,
      FirewallAdminUpdatedEvent.OutputTuple,
      FirewallAdminUpdatedEvent.OutputObject
    >;

    "FirewallUpdated(address)": TypedContractEvent<
      FirewallUpdatedEvent.InputTuple,
      FirewallUpdatedEvent.OutputTuple,
      FirewallUpdatedEvent.OutputObject
    >;
    FirewallUpdated: TypedContractEvent<
      FirewallUpdatedEvent.InputTuple,
      FirewallUpdatedEvent.OutputTuple,
      FirewallUpdatedEvent.OutputObject
    >;
  };
}
